import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = 'cff6a03aeeb1'
down_revision = 'ac605807115c'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Handle other tables first (copied from original migration) ---
    try:
        with op.batch_alter_table('logs', schema=None) as batch_op:
            batch_op.drop_index('ix_logs_timestamp')
        op.drop_table('logs')
    except Exception as e:
        print(f"Ignoring error dropping logs table/index: {e}")

    try:
        with op.batch_alter_table('warnings', schema=None) as batch_op:
            batch_op.drop_index('ix_warnings_issued_at')
        op.drop_table('warnings')
    except Exception as e:
        print(f"Ignoring error dropping warnings table/index: {e}")

    try:
        op.drop_table('music')
    except Exception as e:
        print(f"Ignoring error dropping music table: {e}")
    try:
        op.drop_table('announcements')
    except Exception as e:
        print(f"Ignoring error dropping announcements table: {e}")
    try:
        op.drop_table('forbidden_content')
    except Exception as e:
        print(f"Ignoring error dropping forbidden_content table: {e}")
    try:
        op.drop_table('themes')
    except Exception as e:
        print(f"Ignoring error dropping themes table: {e}")

    try:
        with op.batch_alter_table('messages', schema=None) as batch_op:
            batch_op.drop_index('ix_messages_sent_at')
        op.drop_table('messages')
    except Exception as e:
        print(f"Ignoring error dropping messages table/index: {e}")

    with op.batch_alter_table('admins', schema=None) as batch_op:
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=256),
               nullable=True)

    with op.batch_alter_table('downloads', schema=None) as batch_op:
        batch_op.add_column(sa.Column('url', sa.String(length=2048), nullable=False, server_default='')) # Provide default
        batch_op.add_column(sa.Column('download_time', sa.DateTime(), nullable=True))
        try:
            batch_op.drop_index('ix_downloads_downloaded_at')
        except Exception as e:
            print(f"Ignoring error dropping index ix_downloads_downloaded_at: {e}")
        batch_op.drop_column('content_url')
        batch_op.drop_column('content_type')
        batch_op.drop_column('downloaded_at')

    # --- Explicit SQLite handling for 'settings' table ---
    print("Applying explicit SQLite migration for 'settings' table...")
    op.execute('ALTER TABLE settings RENAME TO _settings_old;')

    op.create_table('settings',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('key', sa.String(length=128), nullable=False),
        sa.Column('value', sa.Text(), nullable=True),
        sa.Column('last_updated', sa.DateTime(), nullable=True)
    )
    op.create_index('ix_settings_key', 'settings', ['key'], unique=True)

    # Copy data - assuming 'key' and 'value' are the essential columns to preserve
    print("Copying data from old settings table...")
    op.execute('''
        INSERT INTO settings (key, value, last_updated)
        SELECT key, value, CURRENT_TIMESTAMP FROM _settings_old;
    ''')

    op.execute('DROP TABLE _settings_old;')
    print("Finished explicit SQLite migration for 'settings' table.")
    # --- End explicit SQLite handling for 'settings' table ---


    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_subscribed', sa.Boolean(), nullable=False, server_default=sa.false())) # Add server_default
        batch_op.alter_column('first_name',
               existing_type=sa.VARCHAR(length=128),
               type_=sa.String(length=64),
               existing_nullable=True)
        batch_op.alter_column('last_name',
               existing_type=sa.VARCHAR(length=128),
               type_=sa.String(length=64),
               existing_nullable=True)
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=128),
               type_=sa.String(length=64),
               existing_nullable=True)
        batch_op.alter_column('is_banned',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               server_default=sa.false()) # Add server_default
        try:
            batch_op.drop_index('ix_users_joined_at')
        except Exception as e:
            print(f"Ignoring error dropping index ix_users_joined_at: {e}")
        try:
            batch_op.drop_index('ix_users_last_active_at')
        except Exception as e:
            print(f"Ignoring error dropping index ix_users_last_active_at: {e}")
        try:
            batch_op.drop_index('ix_users_username')
        except Exception as e:
            print(f"Ignoring error dropping index ix_users_username: {e}")
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=False)
        batch_op.drop_column('ban_reason')
        batch_op.drop_column('last_warning_at')
        batch_op.drop_column('ban_expires_at')
        batch_op.drop_column('warning_count')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # NOTE: Downgrade might be complex due to raw SQL in upgrade.
    # For simplicity, keeping the original downgrade, but it might fail.
    # A proper downgrade would involve reversing the raw SQL steps.
    print("Attempting downgrade (may be incomplete due to raw SQL in upgrade)...")

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('warning_count', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('ban_expires_at', sa.DATETIME(), nullable=True))
        batch_op.add_column(sa.Column('last_warning_at', sa.DATETIME(), nullable=True))
        batch_op.add_column(sa.Column('ban_reason', sa.TEXT(), nullable=True))
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.create_index('ix_users_username', ['username'], unique=1)
        batch_op.create_index('ix_users_last_active_at', ['last_active_at'], unique=False)
        batch_op.create_index('ix_users_joined_at', ['joined_at'], unique=False)
        batch_op.alter_column('is_banned',
               existing_type=sa.BOOLEAN(),
               nullable=True) # Revert server_default removal implicitly
        batch_op.alter_column('username',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=128),
               existing_nullable=True)
        batch_op.alter_column('last_name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=128),
               existing_nullable=True)
        batch_op.alter_column('first_name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=128),
               existing_nullable=True)
        batch_op.drop_column('is_subscribed')

    # --- Reverting 'settings' table changes (Simplified - requires raw SQL for full reverse) ---
    print("Attempting to revert 'settings' table changes (simplified)...")
    with op.batch_alter_table('settings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('last_updated_by_admin_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('description', sa.TEXT(), nullable=True))
        batch_op.add_column(sa.Column('last_updated_at', sa.DATETIME(), nullable=True))
        # Assuming the FK constraint was named; otherwise, this might fail or need explicit name
        # batch_op.create_foreign_key(None, 'admins', ['last_updated_by_admin_id'], ['id'])
        batch_op.drop_index('ix_settings_key') # Use batch_op.f if needed
        batch_op.drop_column('last_updated')
        batch_op.drop_column('id')
    # --- End reverting 'settings' table changes ---


    with op.batch_alter_table('downloads', schema=None) as batch_op:
        batch_op.add_column(sa.Column('downloaded_at', sa.DATETIME(), nullable=True))
        batch_op.add_column(sa.Column('content_type', sa.VARCHAR(length=64), nullable=True))
        batch_op.add_column(sa.Column('content_url', sa.TEXT(), nullable=True))
        batch_op.create_index('ix_downloads_downloaded_at', ['downloaded_at'], unique=False)
        batch_op.drop_column('download_time')
        batch_op.drop_column('url')

    with op.batch_alter_table('admins', schema=None) as batch_op:
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=256),
               nullable=False)
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=64),
               nullable=False)

    # --- Recreate dropped tables (Simplified structure) ---
    print("Attempting to recreate dropped tables (simplified)...")
    op.create_table('messages',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('sender_id', sa.INTEGER(), nullable=False),
        sa.Column('recipient_id', sa.INTEGER(), nullable=True),
        sa.Column('message_text', sa.TEXT(), nullable=False),
        sa.Column('sent_at', sa.DATETIME(), nullable=True),
        sa.Column('is_broadcast', sa.BOOLEAN(), nullable=True),
        # sa.ForeignKeyConstraint(['recipient_id'], ['users.id'], ), # Simplified
        # sa.ForeignKeyConstraint(['sender_id'], ['users.id'], ), # Simplified
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.create_index('ix_messages_sent_at', ['sent_at'], unique=False)

    op.create_table('themes',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('name', sa.VARCHAR(length=128), nullable=False),
        # ... other columns ...
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_table('forbidden_content',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('content_url', sa.TEXT(), nullable=False),
        # ... other columns ...
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('content_url')
    )
    op.create_table('announcements',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('admin_id', sa.INTEGER(), nullable=False),
        # ... other columns ...
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('music',
        sa.Column('id', sa.INTEGER(), nullable=False),
        # ... other columns ...
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('warnings',
        sa.Column('id', sa.INTEGER(), nullable=False),
        # ... other columns ...
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('warnings', schema=None) as batch_op:
        batch_op.create_index('ix_warnings_issued_at', ['issued_at'], unique=False)

    op.create_table('logs',
        sa.Column('id', sa.INTEGER(), nullable=False),
        # ... other columns ...
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('logs', schema=None) as batch_op:
        batch_op.create_index('ix_logs_timestamp', ['timestamp'], unique=False)

    # ### end Alembic commands ###
